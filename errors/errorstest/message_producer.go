// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package errorstest

import (
	"sync"
)

var (
	lockMessageProducerMockOutput sync.RWMutex
)

// MessageProducerMock is a mock implementation of MessageProducer.
//
//     func TestSomethingThatUsesMessageProducer(t *testing.T) {
//
//         // make and configure a mocked MessageProducer
//         mockedMessageProducer := &MessageProducerMock{
//             OutputFunc: func() chan []byte {
// 	               panic("TODO: mock out the Output method")
//             },
//         }
//
//         // TODO: use mockedMessageProducer in code that requires MessageProducer
//         //       and then make assertions.
//
//     }
type MessageProducerMock struct {
	// OutputFunc mocks the Output method.
	OutputFunc func() chan []byte

	// calls tracks calls to the methods.
	calls struct {
		// Output holds details about calls to the Output method.
		Output []struct {
		}
	}
}

// Output calls OutputFunc.
func (mock *MessageProducerMock) Output() chan []byte {
	if mock.OutputFunc == nil {
		panic("moq: MessageProducerMock.OutputFunc is nil but MessageProducer.Output was just called")
	}
	callInfo := struct {
	}{}
	lockMessageProducerMockOutput.Lock()
	mock.calls.Output = append(mock.calls.Output, callInfo)
	lockMessageProducerMockOutput.Unlock()
	return mock.OutputFunc()
}

// OutputCalls gets all the calls that were made to Output.
// Check the length with:
//     len(mockedMessageProducer.OutputCalls())
func (mock *MessageProducerMock) OutputCalls() []struct {
} {
	var calls []struct {
	}
	lockMessageProducerMockOutput.RLock()
	calls = mock.calls.Output
	lockMessageProducerMockOutput.RUnlock()
	return calls
}
