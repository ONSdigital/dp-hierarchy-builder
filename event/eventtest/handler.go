// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package eventtest

import (
	"github.com/ONSdigital/dp-hierarchy-builder/event"
	"sync"
)

var (
	lockHandlerMockHandle sync.RWMutex
)

// HandlerMock is a mock implementation of Handler.
//
//     func TestSomethingThatUsesHandler(t *testing.T) {
//
//         // make and configure a mocked Handler
//         mockedHandler := &HandlerMock{
//             HandleFunc: func(observationsImported *event.ObservationsImported) error {
// 	               panic("TODO: mock out the Handle method")
//             },
//         }
//
//         // TODO: use mockedHandler in code that requires Handler
//         //       and then make assertions.
//
//     }
type HandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(observationsImported *event.ObservationsImported) error

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// ObservationsImported is the observationsImported argument value.
			ObservationsImported *event.ObservationsImported
		}
	}
}

// Handle calls HandleFunc.
func (mock *HandlerMock) Handle(observationsImported *event.ObservationsImported) error {
	if mock.HandleFunc == nil {
		panic("moq: HandlerMock.HandleFunc is nil but Handler.Handle was just called")
	}
	callInfo := struct {
		ObservationsImported *event.ObservationsImported
	}{
		ObservationsImported: observationsImported,
	}
	lockHandlerMockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	lockHandlerMockHandle.Unlock()
	return mock.HandleFunc(observationsImported)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedHandler.HandleCalls())
func (mock *HandlerMock) HandleCalls() []struct {
	ObservationsImported *event.ObservationsImported
} {
	var calls []struct {
		ObservationsImported *event.ObservationsImported
	}
	lockHandlerMockHandle.RLock()
	calls = mock.calls.Handle
	lockHandlerMockHandle.RUnlock()
	return calls
}
